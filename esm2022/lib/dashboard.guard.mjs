import { inject } from '@angular/core';
import { Router } from '@angular/router';
import { CookieService } from './cookie.service';
import * as jwt_decode from 'jwt-decode';
export const dashboardGuard = (_route, _state) => {
    const cookieService = inject(CookieService);
    const router = inject(Router);
    const query = router.getCurrentNavigation()?.extractedUrl['queryParams']['userData'];
    const setUserDetails = (data) => {
        for (const key in data) {
            if (data.hasOwnProperty(key)) {
                if (typeof data[key] === 'object') {
                    cookieService.set(key, JSON.stringify(data[key]));
                }
                else {
                    cookieService.set(key, data[key]);
                }
            }
        }
    };
    if (!cookieService.get('token')) {
        if (query) {
            const stringifiedData = atob(query);
            const userData = JSON.parse(stringifiedData);
            const token = userData['token'];
            if (token) {
                const decodedToken = jwt_decode.jwtDecode(token);
                if (Date.now() < decodedToken?.exp * 1000) {
                    setUserDetails(userData);
                    return true;
                }
                else {
                    router.navigate(['']);
                    return false;
                }
            }
            else {
                return false;
            }
        }
        else {
            router.navigate(['']);
            return false;
        }
    }
    else {
        const token = cookieService.get('token') || '';
        const decodedToken = jwt_decode.jwtDecode(token);
        if (Date.now() < decodedToken.exp * 1000) {
            return true;
        }
        else {
            router.navigate(['']);
            return false;
        }
    }
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGFzaGJvYXJkLmd1YXJkLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vcHJvamVjdHMvbXktbGlicmFyeS9zcmMvbGliL2Rhc2hib2FyZC5ndWFyZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsTUFBTSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ3ZDLE9BQU8sRUFBaUIsTUFBTSxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFDeEQsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLGtCQUFrQixDQUFDO0FBQ2pELE9BQU8sS0FBSyxVQUFVLE1BQU0sWUFBWSxDQUFDO0FBRXpDLE1BQU0sQ0FBQyxNQUFNLGNBQWMsR0FBa0IsQ0FBQyxNQUFNLEVBQUUsTUFBTSxFQUFFLEVBQUU7SUFDOUQsTUFBTSxhQUFhLEdBQUcsTUFBTSxDQUFDLGFBQWEsQ0FBQyxDQUFDO0lBQzVDLE1BQU0sTUFBTSxHQUFHLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUM5QixNQUFNLEtBQUssR0FDVCxNQUFNLENBQUMsb0JBQW9CLEVBQUUsRUFBRSxZQUFZLENBQUMsYUFBYSxDQUFDLENBQUMsVUFBVSxDQUFDLENBQUM7SUFFekUsTUFBTSxjQUFjLEdBQUcsQ0FBQyxJQUFTLEVBQUUsRUFBRTtRQUNuQyxLQUFLLE1BQU0sR0FBRyxJQUFJLElBQUksRUFBRTtZQUN0QixJQUFJLElBQUksQ0FBQyxjQUFjLENBQUMsR0FBRyxDQUFDLEVBQUU7Z0JBQzVCLElBQUksT0FBTyxJQUFJLENBQUMsR0FBRyxDQUFDLEtBQUssUUFBUSxFQUFFO29CQUNqQyxhQUFhLENBQUMsR0FBRyxDQUFDLEdBQUcsRUFBRSxJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUM7aUJBQ25EO3FCQUFNO29CQUNMLGFBQWEsQ0FBQyxHQUFHLENBQUMsR0FBRyxFQUFFLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO2lCQUNuQzthQUNGO1NBQ0Y7SUFDSCxDQUFDLENBQUM7SUFFRixJQUFJLENBQUMsYUFBYSxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsRUFBRTtRQUMvQixJQUFJLEtBQUssRUFBRTtZQUNULE1BQU0sZUFBZSxHQUFHLElBQUksQ0FBQyxLQUFlLENBQUMsQ0FBQztZQUM5QyxNQUFNLFFBQVEsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLGVBQWUsQ0FBQyxDQUFDO1lBQzdDLE1BQU0sS0FBSyxHQUFHLFFBQVEsQ0FBQyxPQUFPLENBQUMsQ0FBQztZQUVoQyxJQUFJLEtBQUssRUFBRTtnQkFDVCxNQUFNLFlBQVksR0FBb0IsVUFBVSxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsQ0FBQztnQkFDbEUsSUFBSSxJQUFJLENBQUMsR0FBRyxFQUFFLEdBQUcsWUFBWSxFQUFFLEdBQUcsR0FBRyxJQUFJLEVBQUU7b0JBQ3pDLGNBQWMsQ0FBQyxRQUFRLENBQUMsQ0FBQztvQkFDekIsT0FBTyxJQUFJLENBQUM7aUJBQ2I7cUJBQU07b0JBQ0wsTUFBTSxDQUFDLFFBQVEsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7b0JBQ3RCLE9BQU8sS0FBSyxDQUFDO2lCQUNkO2FBQ0Y7aUJBQU07Z0JBQ0wsT0FBTyxLQUFLLENBQUM7YUFDZDtTQUNGO2FBQU07WUFDTCxNQUFNLENBQUMsUUFBUSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztZQUN0QixPQUFPLEtBQUssQ0FBQztTQUNkO0tBQ0Y7U0FBTTtRQUNMLE1BQU0sS0FBSyxHQUFHLGFBQWEsQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLElBQUksRUFBRSxDQUFDO1FBQy9DLE1BQU0sWUFBWSxHQUFvQixVQUFVLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQ2xFLElBQUksSUFBSSxDQUFDLEdBQUcsRUFBRSxHQUFHLFlBQVksQ0FBQyxHQUFHLEdBQUcsSUFBSSxFQUFFO1lBQ3hDLE9BQU8sSUFBSSxDQUFDO1NBQ2I7YUFBTTtZQUNMLE1BQU0sQ0FBQyxRQUFRLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO1lBQ3RCLE9BQU8sS0FBSyxDQUFDO1NBQ2Q7S0FDRjtBQUNILENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGluamVjdCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQ2FuQWN0aXZhdGVGbiwgUm91dGVyIH0gZnJvbSAnQGFuZ3VsYXIvcm91dGVyJztcbmltcG9ydCB7IENvb2tpZVNlcnZpY2UgfSBmcm9tICcuL2Nvb2tpZS5zZXJ2aWNlJztcbmltcG9ydCAqIGFzIGp3dF9kZWNvZGUgZnJvbSAnand0LWRlY29kZSc7XG5cbmV4cG9ydCBjb25zdCBkYXNoYm9hcmRHdWFyZDogQ2FuQWN0aXZhdGVGbiA9IChfcm91dGUsIF9zdGF0ZSkgPT4ge1xuICBjb25zdCBjb29raWVTZXJ2aWNlID0gaW5qZWN0KENvb2tpZVNlcnZpY2UpO1xuICBjb25zdCByb3V0ZXIgPSBpbmplY3QoUm91dGVyKTtcbiAgY29uc3QgcXVlcnkgPVxuICAgIHJvdXRlci5nZXRDdXJyZW50TmF2aWdhdGlvbigpPy5leHRyYWN0ZWRVcmxbJ3F1ZXJ5UGFyYW1zJ11bJ3VzZXJEYXRhJ107XG5cbiAgY29uc3Qgc2V0VXNlckRldGFpbHMgPSAoZGF0YTogYW55KSA9PiB7XG4gICAgZm9yIChjb25zdCBrZXkgaW4gZGF0YSkge1xuICAgICAgaWYgKGRhdGEuaGFzT3duUHJvcGVydHkoa2V5KSkge1xuICAgICAgICBpZiAodHlwZW9mIGRhdGFba2V5XSA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgICBjb29raWVTZXJ2aWNlLnNldChrZXksIEpTT04uc3RyaW5naWZ5KGRhdGFba2V5XSkpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGNvb2tpZVNlcnZpY2Uuc2V0KGtleSwgZGF0YVtrZXldKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfTtcblxuICBpZiAoIWNvb2tpZVNlcnZpY2UuZ2V0KCd0b2tlbicpKSB7XG4gICAgaWYgKHF1ZXJ5KSB7XG4gICAgICBjb25zdCBzdHJpbmdpZmllZERhdGEgPSBhdG9iKHF1ZXJ5IGFzIHN0cmluZyk7XG4gICAgICBjb25zdCB1c2VyRGF0YSA9IEpTT04ucGFyc2Uoc3RyaW5naWZpZWREYXRhKTtcbiAgICAgIGNvbnN0IHRva2VuID0gdXNlckRhdGFbJ3Rva2VuJ107XG5cbiAgICAgIGlmICh0b2tlbikge1xuICAgICAgICBjb25zdCBkZWNvZGVkVG9rZW46IHsgZXhwOiBudW1iZXIgfSA9IGp3dF9kZWNvZGUuand0RGVjb2RlKHRva2VuKTtcbiAgICAgICAgaWYgKERhdGUubm93KCkgPCBkZWNvZGVkVG9rZW4/LmV4cCAqIDEwMDApIHtcbiAgICAgICAgICBzZXRVc2VyRGV0YWlscyh1c2VyRGF0YSk7XG4gICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcm91dGVyLm5hdmlnYXRlKFsnJ10pO1xuICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICByb3V0ZXIubmF2aWdhdGUoWycnXSk7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIGNvbnN0IHRva2VuID0gY29va2llU2VydmljZS5nZXQoJ3Rva2VuJykgfHwgJyc7XG4gICAgY29uc3QgZGVjb2RlZFRva2VuOiB7IGV4cDogbnVtYmVyIH0gPSBqd3RfZGVjb2RlLmp3dERlY29kZSh0b2tlbik7XG4gICAgaWYgKERhdGUubm93KCkgPCBkZWNvZGVkVG9rZW4uZXhwICogMTAwMCkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJvdXRlci5uYXZpZ2F0ZShbJyddKTtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH1cbn07XG4iXX0=